{"version":3,"sources":["clientConfig/api-config.ts","redux/activeWindow/activeWindowReducer.ts","utils/LS.ts","api/api.ts","utils/normalize.ts","utils/parseLastInteraction.ts","api/const.ts","redux/activeChat/activeChatReducer.ts","redux/chats/chatsReducer.ts","redux/users/userReducer.ts","redux/auth/authReducer.ts","Pages/Login/Login.tsx","customHooks/usePrev.ts","clientConfig/socketConfig.ts","components/WebSocket/WebSocket.tsx","containers/Header/Header.tsx","components/Searcher/Searcher.tsx","utils/setAvatar.ts","containers/ChatList/components/UserItem.tsx","components/List/List.tsx","utils/convertDate.ts","components/UI/Spinner.tsx","components/LazyLoadImage/LazyLoadImage.tsx","containers/ChatList/components/ChatItem.jsx","containers/ChatList/ChatList.tsx","utils/throttle.ts","redux/selectors.tsx","containers/ChatInput/ChatInput.tsx","containers/ChatTimeline/Msg.tsx","containers/ChatTimeline/ChatTimeline.tsx","containers/ChatWindow/ChatWindow.tsx","Pages/MainPage/MainComponents.tsx","Pages/MainPage/MainPage.tsx","Pages/SignUp/SignUp.jsx","components/hiddenComponents/PrivateRoute.tsx","App.tsx","redux/rootReducer.ts","index.tsx"],"names":["backendHost","hostname","window","location","process","REACT_APP_BACKEND_HOST","API_ROOT","axios","defaults","baseURL","interceptors","response","use","Promise","resolve","error","status","href","reject","initialState","path","ls","localStorage","stringify","value","JSON","parse","currentUserId","getItem","getUserStorage","id","user","settings","userInfo","_id","currentStorage","setItem","key","config","headers","sessionStorage","name","pass","put","delete","get","chatId","limit","offset","params","q","userId","post","ava","data","entities","ids","map","dataItem","normalizedData","newEntities","lastInteraction","last","SOCKET_TYPE","setActiveChatId","dispatch","type","payload","LS","activeChatId","msgForSend","timeline","GET_ALL_USERS","currentUser","isAuth","mapDispatchToProps","setCurrentWindow","handleAuthLogin","a","API","res","token","withRouter","connect","props","useState","state","setState","setField","e","preventDefault","target","onSubmitHandler","className","onSubmit","placeholder","onChange","required","autoComplete","prev","useRef","useEffect","current","SOCKET_ROOT","addNewMsgToActiveChat","addNewChat","chat","normalize","users","participantsObjects","React","memo","Children","component","ws","WebSocket","setupSocket","close","sendMsg","useCallback","senderId","send","body","onopen","console","log","onclose","onerror","err","onmessage","Header","logoutHandler","confirm","handleAuthLogout","onClick","icon","faBars","size","faPowerOff","Searcher","classNamePrefix","setQuery","query","faSearch","setUserAva","obj","undefined","chatType","setChatAva","UserItem","item","setSearchState","startChat","data-isonline","isOnline","src","setAvatar","alt","faPlus","List","listItems","ListItemComponent","listItem","listItemProps","date","d","Date","interactionDate","toLocaleString","day","month","year","today","yesterday","setDate","getDate","formatDate","toLocaleDateString","toLocaleTimeString","slice","Spinner","width","height","LazyLoadImage","restProps","spinnerStyles","imageLoaded","activeClass","propsClass","title","onLoad","onError","ownProps","chats","activeChat","auth","lastMsg","data-isselected","secondUserId","participants","find","chatName","setChatName","showTimelineDate","unreadCount","removeItem","chatsIds","setIds","searchState","pending","setPending","asideRef","throttledGetParticipantsByQuery","func","ms","delayedContext","delayedArguments","isCan","wrapper","_self","args","apply","setTimeout","throttle","then","catch","length","memorizedSetActiveChatId","onScroll","scrollHeight","scrollTop","clientHeight","ref","ChatItem","getCurrentUserId","getUsersForChat","createSelector","participant","msg","setMsg","inputRef","contentEditable","onKeyDown","shiftKey","innerText","trim","onInput","message","data-msg-type","getChatTimeline","updateChatTimeline","messages","setMessages","timelineRef","prevMsgCount","usePrev","prevActiveChatId","MainComponents","initApp","parseLastInteraction","prevAuthStatus","validate","pass2","SignUp","file","url","photo","setPhoto","handleOnChange","files","reader","FileReader","onloadend","result","URL","createObjectURL","readAsDataURL","handleSubmit","submitting","pristine","htmlFor","tebindex","input","meta","tabIndex","autoFocus","touched","disabled","PrivateRoute","Component","rest","render","to","activeWindow","Login","exact","MainPage","combineReducers","updatedChat","updatedIds","filter","prevEntites","forEach","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","logger","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a5ff5ae4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nlet backendHost;\nconst hostname = window && window.location && window.location.hostname;\n\nif (hostname === \"localhost\") {\n  backendHost = \"http://localhost:9999\";\n}\nif (hostname === \"blackq.herokuapp.com.\") {\n  backendHost = \"http://blackq.herokuapp.com.\";\n} else {\n  backendHost = process.env.REACT_APP_BACKEND_HOST || \"http://localhost:9999\";\n}\n\nexport const API_ROOT = `${backendHost}/api/`;\n\naxios.defaults.baseURL = API_ROOT;\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"dev - add axios credentials conf\");\n\n  // axios.defaults.withCredentials = true;\n}\n\naxios.interceptors.response.use(\n  (response) => {\n    // Do something with response data\n    return Promise.resolve(response);\n  },\n  (error) => {\n    switch (error.response.status) {\n      case 666:\n        window.location.href = \"/login\";\n        break;\n\n      default:\n        return Promise.reject(error);\n    }\n  }\n);\n","import { Dispatch } from \"redux\";\nimport { IAction } from \"../types\";\n\nconst SET_CURRENT_WINDOW = 'SET_CURRENT_WINDOW';\n\n\nexport const setCurrentWindow = (path: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: SET_CURRENT_WINDOW,\n    payload: path\n  });\n};\n\nconst initialState = {\n  path: '/login',\n};\n\nexport default (state = initialState, { type, payload }: IAction) => {\n  switch (type) {\n    case SET_CURRENT_WINDOW:\n      return {\n        ...state,\n        path: payload,\n      }\n\n    default:\n      return state;\n  }\n}","import { IUserLogin } from \"../redux/types\";\n\n//-------helpers------------------------------\nconst ls = localStorage;\n\nconst stringify = (value: any) => JSON.stringify(value);\nconst parse = (value: any) => JSON.parse(value);\n\nconst currentUserId: string = parse(ls.getItem('currentUserId'));\n\nconst getUserStorage = (id?: string) => parse(ls.getItem(`user_${id || currentUserId}`));\n\n//---------for export-------------------------\nconst authorizeUser = (user: IUserLogin) => {    //register user in LS if doesn't exist or update user info\n  const { settings, ...userInfo } = user;\n\n  if (ls.getItem('user_' + userInfo._id)) {\n    const currentStorage = getUserStorage(userInfo._id);\n\n    ls.setItem(`currentUserId`, stringify(userInfo._id));\n    ls.setItem(`user_${userInfo._id}`, stringify({\n      ...currentStorage,\n      'user': { ...userInfo },\n      'settings': { ...currentStorage.settings, ...settings },\n    }));\n\n    return;\n  }\n\n  ls.setItem('currentUserId', stringify(userInfo._id));\n  ls.setItem(`user_${userInfo._id}`, stringify({ user: userInfo, 'settings': settings }));\n};\n\nconst setItem = <T>(key: string, value: T) => {                  //set key - value to user_id \n  if (!currentUserId) return;\n\n  const userInfo = getUserStorage();\n\n  ls.setItem(`user_${currentUserId}`, stringify({ ...userInfo, [key]: value }))\n};\n\nconst deleteItem = (key: string) => {        // delete key-value by key\n  const userInfo = getUserStorage();\n\n  delete userInfo[key];\n\n  ls.setItem(`user_${currentUserId}`, stringify(userInfo));\n};\n\nconst getItem = (key: string) => {                   // get value by key from user_id\n  const userInfo = getUserStorage();\n\n  return userInfo\n    ? userInfo[key]\n    : null;\n};\n\nconst getAFKTime = (currentTime: number) => {\n  const userInfo = getUserStorage();\n\n  const lastInteractionTime = userInfo && userInfo.lastInteractionTime\n    ? +userInfo.lastInteractionTime\n    : currentTime;\n\n  return (currentTime - lastInteractionTime) / (1000 * 60 * 60);\n};\n\n\nexport default {\n  authorizeUser,\n  setItem,\n  getItem,\n  deleteItem,\n  getAFKTime,\n};","import axios, { AxiosRequestConfig } from \"axios\";\n\nconst config: AxiosRequestConfig | undefined = {\n  headers: { \"x-dark-token\": sessionStorage.getItem(\"x-dark-token\") }\n};\n\nconst loginUser = (name: string, pass: string) => axios.put(\"auth\", { name, pass });\n\nconst signUpUser = (name: string, pass: string, ava: File) =>\n  axios.put(\"users/create\", { name, pass, ava });\n\nconst logoutUser = () => axios.delete(\"auth\", config);\n\nconst getAllUsers = () => axios.get(\"users\", config);\n\nconst getAllChats = () => axios.get(\"chat\", config);\n\nconst getChatTimeline = (chatId: string, limit: number, offset: number) => {\n  return axios.get(\"chat/timeline\", {\n    ...config,\n    params: { chatId, limit, offset }\n  });\n};\n\nconst getParticipantsByQuery = (q: string, limit: number, offset: number = 0) => {\n  return axios.get(\"users/search\", { ...config, params: { q, limit, offset } });\n};\n\nconst startChatByUserId = (userId: string) => axios.post(\"chat\", { userId }, config);\n\nexport default {\n  loginUser,\n  logoutUser,\n  getAllUsers,\n  getAllChats,\n  getChatTimeline,\n  getParticipantsByQuery,\n  startChatByUserId,\n  signUpUser\n};\n","export interface IDataItem<T> {\n  [key: string]: T; // id\n};\n\ninterface IEntities<T> {\n  [key: string]: IDataItem<T>;\n};\n\nexport interface INormalizeResult<T> {\n  entities: IEntities<T>;\n  ids: T[];\n};\n\nexport default <T extends IDataItem<T>>(data: Array<T>, key: string = '_id'): INormalizeResult<T> => {\n  const entities: IEntities<T> = {};\n\n  const ids: T[] = data.map((dataItem: T) => {\n    const id: any = dataItem[key];\n\n    entities[id] = dataItem;\n\n    return id;\n  });\n\n  return { entities, ids };\n};","import { INormalizeResult, IEntities } from \"../redux/types\";\n\nexport default <T>(normalizedData: INormalizeResult<T>): INormalizeResult<T> => {\n  const newEntities: IEntities<T> = {}\n\n  for (const key in normalizedData.entities) {\n    if (normalizedData.entities[key].lastInteraction) {\n      const last: any = normalizedData.entities[key].lastInteraction;\n\n      newEntities[key] = {\n        ...normalizedData.entities[key],\n        lastInteraction: JSON.parse(last)\n      };\n    }\n    else {\n      newEntities[key] = normalizedData.entities[key];\n    }\n  }\n\n  return {ids: normalizedData.ids, entities: newEntities};\n};","export const CHAT_TYPE = {\n  saved: 0,\n  dialog: 1,\n  public: 2\n};\n\nexport const SOCKET_TYPE = {\n  ping: \"ping\",\n  pong: \"pong\",\n  message: \"message\",\n  inc: \"inc\",\n  out: \"out\",\n  sys: \"sys\",\n  newChat: \"new-chat\"\n};\n\nexport const TIMELINE_MSG_LIMIT = 15;\nexport const USER_SEARCH_LIMIT = 20;\n","import { Dispatch } from \"redux\";\n\nimport API from \"../../api/api\";\nimport LS from \"../../utils/LS\";\n\nimport { IAction, INewMsg } from \"../types\";\n\nimport { TIMELINE_MSG_LIMIT } from \"../../api/const\";\nexport const SET_ACTIVE_CHAT_ID = 'SET_ACTIVE_CHAT_ID';\nexport const SET_CHAT_TIMELINE = 'SET_CHAT_TIMELINE';\nexport const ADD_NEW_MSG = 'ADD_NEW_MSG';\nexport const UPDATE_CHAT_TIMELINE = 'UPDATE_CHAT_TIMELINE';\n\n\nexport const setActiveChatId = (id: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: SET_ACTIVE_CHAT_ID,\n    payload: id\n  });\n\n  LS.setItem('activeChatId', id);\n};\n\nexport const getChatTimeline = (chatId: string) => async (dispatch: Dispatch) => {\n  const timeline = await API.getChatTimeline(chatId, TIMELINE_MSG_LIMIT, 0);\n\n  dispatch({\n    type: SET_CHAT_TIMELINE,\n    payload: timeline.data,\n  });\n};\n\nexport const updateChatTimeline = (chatId: string, limit: number, offset: number) => async (dispatch: Dispatch) => {\n  const timeline = await API.getChatTimeline(chatId, limit, offset);\n\n  dispatch({\n    type: UPDATE_CHAT_TIMELINE,\n    payload: timeline.data,\n  });\n};\n\nexport const addNewMsgToActiveChat = (data: INewMsg) => (dispatch: Dispatch) => {\n  dispatch({\n    type: ADD_NEW_MSG,\n    payload: data,\n  })\n};\n\nconst initialState = {\n  activeChatId: null,\n  msgForSend: null,\n  timeline: [],\n};\n\nexport default (state = initialState, { type, payload }: IAction) => {\n  switch (type) {\n    case SET_ACTIVE_CHAT_ID: {\n      return {\n        ...state,\n        activeChatId: payload,\n      }\n    }\n\n    case SET_CHAT_TIMELINE: {\n      return {\n        ...state,\n        timeline: payload,\n      }\n    }\n    case UPDATE_CHAT_TIMELINE: {\n      return {\n        ...state,\n        timeline: [...payload, ...state.timeline],\n      }\n    }\n\n    case ADD_NEW_MSG: {\n      return {\n        ...state,\n        timeline: [...state.timeline, payload.msg]\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Dispatch } from \"redux\";\nimport { IAction, INewChat } from \"../types\";\nimport API from \"../../api/api\";\nimport normalize from \"../../utils/normalize\";\nimport parseLastInteraction from \"../../utils/parseLastInteraction\";\n\nimport { ADD_NEW_MSG } from \"../activeChat/activeChatReducer\";\nimport { GET_ALL_USERS } from \"../users/userReducer\";\n\nexport const GET_ALL_CHATS = \"GET_ALL_CHATS\";\nexport const ADD_NEW_CHAT = \"ADD_NEW_CHAT\";\n\ninterface IinitState {\n  entities: any;\n  ids: string[];\n}\n\nexport const getAllChats = () => async (dispatch: Dispatch) => {\n  const res = await API.getAllChats();\n\n  const chats = res.data;\n\n  dispatch({\n    type: GET_ALL_CHATS,\n    payload: parseLastInteraction(normalize(chats))\n  });\n};\n\nexport const addNewChat = (data: any) => (dispatch: Dispatch) => {\n  dispatch({\n    type: ADD_NEW_CHAT,\n    payload: {\n      chat: normalize([data.chat]),\n      users: normalize(data.participantsObjects)\n    }\n  });\n};\n\nconst initialState = {\n  entities: {},\n  ids: []\n};\n\nexport default (state: IinitState = initialState, { type, payload }: IAction) => {\n  switch (type) {\n    case GET_ALL_CHATS: {\n      return {\n        ...state,\n        entities: payload.entities,\n        ids: payload.ids\n      };\n    }\n\n    case ADD_NEW_CHAT: {\n      const updatedChat = {\n        ...payload.chat.entities[payload.chat.ids[0]],\n        users: payload.users\n      };\n\n      return {\n        ...state,\n        entities: { ...state.entities, [payload.chat.ids[0]]: updatedChat },\n        ids: [...payload.chat.ids, ...state.ids]\n      };\n    }\n\n    case ADD_NEW_MSG: {\n      const updatedChat = {\n        ...payload.chat,\n        lastInteraction: JSON.parse(payload.chat.lastInteraction)\n      };\n      const updatedIds = state.ids.filter((id) => id !== payload.chat._id);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [payload.chat._id]: updatedChat\n        },\n        ids: [payload.chat._id, ...updatedIds]\n      };\n    }\n\n    case GET_ALL_USERS: {\n      const prevEntites = state.entities;\n\n      state.ids.forEach((chatId) => {\n        const users: any = {};\n\n        state.entities[chatId].participants.forEach((userId: string) => {\n          users[userId] = payload.entities[userId];\n        });\n\n        prevEntites[chatId] = {\n          ...prevEntites[chatId],\n          users\n        };\n      });\n\n      return {\n        ...state,\n        entities: prevEntites\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import API from \"../../api/api\";\nimport normalize from \"../../utils/normalize\";\n\nimport { Dispatch } from \"redux\";\nimport { IAction } from \"../types\";\nimport { ADD_NEW_CHAT } from \"../chats/chatsReducer\";\n\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\n\n\nexport const getAllUsers = () => async (dispatch: Dispatch) => {\n  const res = await API.getAllUsers();\n\n  const users = res.data;\n\n  dispatch({\n    type: GET_ALL_USERS,\n    payload: normalize(users),\n  });\n};\n\nconst initialState = {\n  entities: {},\n  ids: []\n};\n\nexport default (state = initialState, { type, payload }: IAction) => {\n  switch (type) {\n    case GET_ALL_USERS: {\n      return {\n        ...state,\n        entities: payload.entities,\n        ids: payload.ids,\n      }\n    }\n    case ADD_NEW_CHAT: {\n      return {\n        ...state,\n        entities: {...state.entities, ...payload.chat.entities},\n        ids: [...payload.chat.ids, ...state.ids],\n      }\n    }\n\n    default:\n      return state;\n  }\n}","import LS from \"../../utils/LS\";\nimport API from \"../../api/api\";\nimport { getAllUsers } from \"../users/userReducer\";\nimport { getAllChats } from \"../chats/chatsReducer\";\nimport { setActiveChatId } from \"../activeChat/activeChatReducer\";\n\nimport { Dispatch } from \"redux\";\nimport { IAction } from \"../types\";\nimport { History } from \"history\";\n\nexport const AUTH_LOGIN = \"AUTH_LOGIN\";\nexport const CURRENT_USER_UPDATE = \"CURRENT_USER_UPDATE\";\nexport const SET_IS_AUTH = \"SET_IS_AUTH\";\n\nexport const handleAuthLogin = (name: string, pass: string) => async (dispatch: Dispatch) => {\n  const res = await API.loginUser(name, pass);\n  const currentUser = res.data;\n\n  if (currentUser) {\n    const { \"x-dark-token\": token } = currentUser;\n\n    sessionStorage.setItem(\"x-dark-token\", token);\n\n    delete currentUser[\"x-dark-token\"];\n\n    LS.authorizeUser(currentUser);\n\n    dispatch({ type: SET_IS_AUTH, payload: true });\n\n    window.location.href = \"/\";\n  }\n};\n\nexport const currentUserUpdate = () => (dispatch: Dispatch) => {\n  const user = LS.getItem(\"user\");\n\n  dispatch({ type: CURRENT_USER_UPDATE, payload: user });\n};\n\nexport const handleAuthLogout = () => (dispatch: Dispatch) => {\n  sessionStorage.removeItem(\"x-dark-token\");\n  window.location.href = \"/login\";\n  LS.deleteItem(\"user\");\n\n  dispatch({ type: AUTH_LOGIN });\n};\n\nexport const initApp = () => (dispatch: any) => {\n  const activeChatId = LS.getItem(\"activeChatId\");\n\n  dispatch(currentUserUpdate());\n  dispatch(getAllUsers());\n\n  dispatch(getAllChats());\n\n  if (activeChatId) {\n    dispatch(setActiveChatId(activeChatId));\n  }\n};\n\nconst initialState = {\n  currentUser: null,\n  isAuth: !!LS.getItem(\"user\") || false\n};\n\nexport default (state = initialState, { type, payload }: IAction) => {\n  switch (type) {\n    case AUTH_LOGIN: {\n      return {\n        ...state,\n        currentUser: payload\n      };\n    }\n    case SET_IS_AUTH: {\n      return {\n        ...state,\n        isAuth: payload\n      };\n    }\n    case CURRENT_USER_UPDATE: {\n      return {\n        ...state,\n        currentUser: payload\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\nimport \"./Login.scss\";\nimport { setCurrentWindow } from \"../../redux/activeWindow/activeWindowReducer\";\nimport { handleAuthLogin } from \"../../redux/auth/authReducer\";\n\ninterface ISetState {\n  name: string;\n  pass: string;\n}\n\ninterface ILogin {\n  setCurrentWindow: (path: string) => void;\n  handleAuthLogin: (name: string, pass: string) => void;\n}\n\nconst Login = (props: ILogin) => {\n  const [state, setState] = useState<ISetState>({\n    name: \"\",\n    pass: \"\"\n  });\n\n  const setField = (e: React.FormEvent<HTMLInputElement>, key: string) => {\n    e.preventDefault();\n\n    const { value }: any = e.target;\n    setState({\n      ...state,\n      [key]: value\n    });\n  };\n\n  const onSubmitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    props.handleAuthLogin(state.name, state.pass);\n  };\n\n  return (\n    <main className='login-wrapper'>\n      {/* <h1 className=\"login-heading\">sign in</h1> */}\n\n      <form onSubmit={onSubmitHandler}>\n        <input\n          type='text'\n          value={state.name}\n          placeholder='Name ...'\n          onChange={(e) => setField(e, \"name\")}\n          required\n        />\n\n        <input\n          autoComplete='new-password'\n          type='password'\n          value={state.pass}\n          placeholder='Password ...'\n          onChange={(e) => setField(e, \"pass\")}\n          required\n        />\n\n        <div className='controls'>\n          <button type='submit' className='btn btn-primary btn-primary--wide'>\n            Log In\n          </button>\n        </div>\n      </form>\n    </main>\n  );\n};\n\nconst mapDispatchToProps = {\n  setCurrentWindow,\n  handleAuthLogin\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Login));\n","import { useRef, useEffect, MutableRefObject } from \"react\";\n\nexport default <T>(value: T): T => {\n  const prev: MutableRefObject<T> = useRef(value);\n\n  useEffect(() => {\n    prev.current = value;\n  })\n\n  return prev.current;\n};","let socketHost: string;\n\nconst hostname = window && window.location && window.location.hostname;\n\nif (hostname === \"localhost\") {\n  socketHost = \"ws://localhost:8888\";\n} else if (hostname === \"blackq.herokuapp.com.\") {\n  socketHost = \"ws://blackq.herokuapp.com.:8888\";\n} else {\n  socketHost = \"ws://127.0.0.1:8888\";\n}\n\nexport const SOCKET_ROOT = `${socketHost}`;\n","import React, { useEffect, useCallback, ReactType } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addNewMsgToActiveChat } from \"../../redux/activeChat/activeChatReducer\";\nimport { addNewChat } from \"../../redux/chats/chatsReducer\";\nimport { SOCKET_TYPE } from \"../../api/const\";\nimport { INewMsg, INewChat } from \"../../redux/types\";\nimport { SOCKET_ROOT } from \"../../clientConfig/socketConfig\";\n\ninterface IProps {\n  addNewMsgToActiveChat: (data: INewMsg) => void;\n  addNewChat: (data: INewChat) => void;\n  component: ReactType;\n}\n\nconst SocketWrapper = (props: IProps) => {\n  const { component: Children, addNewMsgToActiveChat, addNewChat } = props;\n  const ws = new WebSocket(SOCKET_ROOT);\n\n  useEffect(() => {\n    setupSocket();\n\n    return () => {\n      ws.close();\n    };\n  }, [ws]);\n\n  const sendMsg = useCallback(\n    (chatId: string, msgForSend: string, senderId: string) => {\n      ws.send(\n        JSON.stringify({\n          data: {\n            body: msgForSend,\n            chatId,\n            senderId\n          },\n          type: \"message\"\n        })\n      );\n    },\n    [ws]\n  );\n\n  const setupSocket = () => {\n    ws.onopen = () => {\n      console.log(\"Socket connected!)\");\n    };\n\n    ws.onclose = () => {\n      console.log(\"Socket disconnected!(\");\n    };\n\n    ws.onerror = (err) => {\n      console.log(\"Socket error: \", err);\n    };\n\n    ws.onmessage = (e) => {\n      const { data, type } = JSON.parse(e.data);\n      console.log(\"CHAT SOCKET EVENT::::::>>> data:\", data, \"type:\", type);\n\n      switch (type) {\n        case SOCKET_TYPE.ping: {\n          ws.send(JSON.stringify({ data: \"pong\", type: \"pong\" }));\n          break;\n        }\n        case SOCKET_TYPE.out:\n        case SOCKET_TYPE.inc:\n        case SOCKET_TYPE.sys:\n        case SOCKET_TYPE.message: {\n          addNewMsgToActiveChat(data);\n          break;\n        }\n        case SOCKET_TYPE.newChat: {\n          addNewChat(data);\n        }\n        default:\n          break;\n      }\n    };\n  };\n\n  return <Children sendMsg={sendMsg} />;\n};\n\nconst mapDispatchToProps = {\n  addNewMsgToActiveChat,\n  addNewChat\n};\n\nexport default connect(null, mapDispatchToProps)(React.memo(SocketWrapper));\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPowerOff, faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Header.scss\";\nimport API from \"../../api/api\";\n\ninterface IProps {\n  handleAuthLogout: () => void;\n}\n\nconst Header = (props: IProps) => {\n  const logoutHandler = async () => {\n    await API.logoutUser();\n\n    if (!!window.confirm(\"are u sure?\")) {\n      props.handleAuthLogout();\n    }\n  };\n\n  return (\n    <header className='header'>\n      <div className='header__wrap'>\n        <button className='header__settings' onClick={() => console.log(\"settings here\")}>\n          <FontAwesomeIcon icon={faBars} size='2x' />\n        </button>\n\n        <h1 className='header__head'>BLACK</h1>\n\n        <button className='header__logout' onClick={logoutHandler}>\n          <FontAwesomeIcon icon={faPowerOff} size='2x' />\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useCallback } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport throttle from \"../../utils/throttle\";\nimport API from \"../../api/api\";\nimport { IUser, IChat } from \"../../redux/types\";\n\ninterface IProps {\n  classNamePrefix: string;\n  setSearchState: (arr: IUser[] | IChat[]) => void;\n  setQuery: (query: string) => void;\n  query: string;\n}\n\nconst Searcher = (props: IProps) => {\n  const { classNamePrefix, setQuery } = props;\n\n  return (\n    <div className={`${classNamePrefix}__searcher-wrap`}>\n      <input\n        value={props.query}\n        type='text'\n        className={`${classNamePrefix}__input`}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n\n      <FontAwesomeIcon className={`${classNamePrefix}__icon`} icon={faSearch} />\n    </div>\n  );\n};\n\nexport default Searcher;\n","import { IChat, IUser } from \"../redux/types\";\n\nexport const setChatAva = (obj: IChat) => {\n  if (obj.ava) return obj.ava;\n\n  switch (obj.chatType) {\n    case 0:\n      return \"./media/bookmark.png\";\n    default:\n      return \"./media/default.png\";\n  }\n};\n\nexport const setUserAva = (obj: IUser) => {\n  if (obj && obj.ava) return obj.ava;\n\n  return \"./media/default.png\";\n};\n\nexport default (obj: any) => {\n  if (obj.chatType !== undefined) return setChatAva(obj);\n\n  return setUserAva(obj);\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nimport setAvatar from \"../../../utils/setAvatar\";\n\nimport { IUser } from \"../../../redux/types\";\nimport API from \"../../../api/api\";\n\ninterface IProps {\n  item: IUser;\n  setSearchState: (arr: []) => void;\n  setQuery: (arr: \"\") => void;\n}\n\nconst UserItem = ({ item, setSearchState, setQuery }: IProps) => {\n  const startChat = async () => {\n    setSearchState([]);\n    setQuery(\"\");\n\n    await API.startChatByUserId(item._id);\n  };\n\n  return (\n    <li className='chat-list-item'>\n      <div data-isonline={item.isOnline} className='chat-list-item__ava-wrap'>\n        <img src={setAvatar(item)} alt='user avatar' />\n      </div>\n\n      <div className='chat-list-item__info-block chat-list-item__info-block--search'>\n        <span className='chat-list-item__chat-name chat-list-item__chat-name--search'>\n          {item.name || \"NoNameNPC\"}\n        </span>\n      </div>\n\n      <div className='chat-list-item__utils-block chat-list-item__utils-block--search'>\n        <span onClick={startChat} className='chat-list-item__add-conversation'>\n          <FontAwesomeIcon icon={faPlus} />\n        </span>\n      </div>\n    </li>\n  );\n};\n\nexport default UserItem;\n","import React, { ReactType } from 'react';\n\n\ninterface IPropsList {\n  className: string,\n  listItems: any[],\n  component: ReactType,\n  listItemProps?: any,\n  loadMore?: (offset: number) => void,\n  listLoadPending?: boolean,\n};\n\nconst List = (props: IPropsList) => {\n  const {\n    className,\n    listItems,\n    component: ListItemComponent,\n  } = props;\n\n  return (\n    <ul className={className}>\n      {listItems.map(listItem => {\n        return <ListItemComponent\n          key={listItem._id || listItem}\n          item={listItem}\n          {...props.listItemProps} />\n      })}\n    </ul>\n  )\n};\n\n\nexport default List;","export default(date: Date | number) => {\n  const d = new Date();\n\n  const interactionDate = new Date(date).toLocaleString('en-US', { day: 'numeric', month: '2-digit', year: 'numeric' });\n  const today = new Date().toLocaleString('en-US', { day: 'numeric', month: '2-digit', year: 'numeric' });\n  const yesterday = new Date(d.setDate(d.getDate() - 1)).toLocaleString('en-US', { day: 'numeric', month: '2-digit', year: 'numeric' });\n\n  const formatDate = new Date(date).toLocaleDateString('en-US', { day: 'numeric', month: 'short' });\n\n  if (interactionDate === today) {\n    return new Date(date).toLocaleTimeString().slice(0, 5);\n  }\n  else if (interactionDate === yesterday) {\n    return \"Yesterday\";\n  }\n  else {\n    return formatDate;\n  }\n};","import React from 'react';\n\ninterface ISpinnerProps {\n  width?: string | number,\n  height?: string | number,\n  className?: string,\n  spinnerStyles?: any,\n}\n\nconst Spinner = ({ className, width = \"100%\", height = \"100%\" }: ISpinnerProps) => (\n  <img\n    src=\"/media/spinner.gif\"\n    width={width}\n    height={height}\n    className={className}\n    alt=\"Loading...\" />\n);\n\nexport default Spinner;","import React, { useState } from 'react'\n\nimport Spinner from '../UI/Spinner';\nimport './LazyLoadImage.scss'\n\ninterface IState {\n  imageLoaded: boolean,\n  error: undefined | string\n};\n\ninterface IProps {\n  alt?: string,\n  className?: string,\n  onClick?: () => void,\n  spinnerStyles?: any,\n  restProps?: any,\n  src: string,\n}\n\nconst LazyLoadImage = (props: IProps) => {\n  const { alt, className, onClick, spinnerStyles, ...restProps } = props;\n\n  const [state, setState] = useState<IState>({\n    imageLoaded: false,\n    error: undefined,\n  })\n\n  const handleImageLoaded = () => {\n    setState({\n      imageLoaded: true,\n      error: ''\n    });\n  };\n\n  const handleImageErrored = () => {\n    setState({\n      error: \"Failed to load image...\",\n      imageLoaded: true\n    });\n  };\n\n  const renderSpinner = () => (\n    state.imageLoaded\n      ? null\n      : <Spinner />\n  );\n\n  const renderError = () => (\n    state.error\n      ? <img\n        className=\"lazy-load__error\"\n        alt=\"error\"\n        title={state.error}\n        src=\"./media/error.png\" />\n      : null\n  );\n\n  const activeClass = !state.error && state.imageLoaded\n    ? \"lazy-load__image\"\n    : \"lazy-load__image--hidden\";\n  const propsClass = className\n    ? className\n    : '';\n\n  return (\n    <div className=\"lazy-load__container\">\n      {renderSpinner()}\n      {renderError()}\n\n      <img\n        {...restProps}\n        alt={alt ? alt : \"lazy\"}\n        className={`${activeClass} ${propsClass}`}\n        onClick={onClick}\n        onLoad={handleImageLoaded}\n        onError={handleImageErrored} />\n    </div>\n  );\n}\n\nexport default LazyLoadImage;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport showTimelineDate from \"../../../utils/convertDate\";\nimport setAvatar from \"../../../utils/setAvatar\";\nimport \"./ChatItem.scss\";\nimport LazyLoadImage from \"../../../components/LazyLoadImage/LazyLoadImage\";\n\nconst ChatItem = ({ chat, setActiveChatId, currentUserId, ...props }) => {\n  const renderLastMsg = (lastMsg) => {\n    if (currentUserId === lastMsg.senderId) {\n      return \"You: \" + lastMsg.body;\n    } else {\n      return lastMsg.body;\n    }\n  };\n\n  const setChatName = () => {\n    switch (chat.chatType) {\n      case 1: {\n        const secondUserId = chat.participants.find((id) => id !== currentUserId);\n        return chat.users && chat.users.entities[secondUserId].name;\n      }\n      default:\n        return chat.chatName;\n    }\n  };\n\n  return (\n    <li\n      data-isselected={props.item === props.activeChat}\n      onClick={() => setActiveChatId(props.item)}\n      className='chat-list-item'\n    >\n      <div className='chat-list-item__ava-wrap'>\n        <LazyLoadImage src={setAvatar(chat)} />\n      </div>\n\n      <div className='chat-list-item__info-block'>\n        <span className='chat-list-item__chat-name'>\n          {chat ? setChatName() : \"Chat name loading...\"}\n        </span>\n\n        <span className='chat-list-item__last-msg'>\n          {chat && chat.lastInteraction && chat.lastInteraction.data\n            ? renderLastMsg(chat.lastInteraction.data)\n            : \"Chat is empty...\"}\n        </span>\n      </div>\n\n      <div className='chat-list-item__utils-block'>\n        <span className='chat-list-item__time'>\n          {chat && chat.lastInteraction && chat.lastInteraction.date\n            ? showTimelineDate(chat.lastInteraction.date)\n            : \"00:00\"}\n        </span>\n\n        {chat && chat.unreadCount ? (\n          <span className='chat-list-item__unread'>{chat.unreadCount}</span>\n        ) : null}\n      </div>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  chat: state.chats.entities[ownProps.item],\n  activeChat: state.activeChat.activeChatId,\n  currentUserId: state.auth.currentUser._id\n});\n\nexport default connect(mapStateToProps)(ChatItem);\n","import React, { useState, useEffect, useCallback, useRef, MutableRefObject } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./ChatList.scss\";\nimport { setActiveChatId } from \"../../redux/activeChat/activeChatReducer\";\nimport Header from \"../Header/Header\";\nimport { handleAuthLogout } from \"../../redux/auth/authReducer\";\nimport Searcher from \"../../components/Searcher/Searcher\";\nimport UserItem from \"./components/UserItem\";\nimport throttle from \"../../utils/throttle\";\nimport API from \"../../api/api\";\nimport { USER_SEARCH_LIMIT } from \"../../api/const\";\n\nimport List from \"../../components/List/List\";\nimport ChatItem from \"./components/ChatItem\";\n\nimport { AppState } from \"../..\";\nimport { IUser, IChat } from \"../../redux/types\";\n\ninterface IProps {\n  chatsIds: string[];\n  setActiveChatId: (id: string) => void;\n  handleAuthLogout: () => void;\n}\n\nconst ChatList = ({ chatsIds, ...props }: IProps) => {\n  const [ids, setIds] = useState<string[]>([]);\n  const [searchState, setSearchState] = useState<IUser[] | IChat[]>([]);\n  const [query, setQuery] = useState<string>(\"\");\n  const [pending, setPending] = useState<boolean>(false);\n\n  const asideRef: MutableRefObject<any> = useRef();\n\n  const throttledGetParticipantsByQuery = useCallback(\n    throttle(\n      (query, offset) =>\n        API.getParticipantsByQuery(query, 20, offset)\n          .then((res) => setSearchState(res.data))\n          .catch(console.error),\n      400\n    ),\n    []\n  );\n\n  useEffect(() => {\n    setIds(chatsIds);\n  }, [chatsIds]);\n\n  useEffect(() => setPending(false), [searchState.length]);\n\n  useEffect(() => {\n    if (query.length > 1) {\n      throttledGetParticipantsByQuery(query);\n    }\n  }, [query, query.length, throttledGetParticipantsByQuery]);\n\n  const memorizedSetActiveChatId = useCallback((id: string) => props.setActiveChatId(id), []);\n\n  const handleScroll = () => {\n    if (\n      asideRef.current.scrollHeight &&\n      asideRef.current.scrollHeight - asideRef.current.scrollTop - asideRef.current.clientHeight <\n        400 &&\n      !pending\n    ) {\n      const offset = searchState.length;\n      setPending(true);\n\n      API.getParticipantsByQuery(query, USER_SEARCH_LIMIT, offset)\n        .then((res) => {\n          setSearchState([...searchState, ...res.data]);\n        })\n        .catch(console.error);\n    }\n  };\n\n  return (\n    <aside onScroll={handleScroll} ref={asideRef} className='aside-chats'>\n      <Header handleAuthLogout={props.handleAuthLogout} />\n\n      <Searcher\n        query={query}\n        setQuery={setQuery}\n        setSearchState={setSearchState}\n        classNamePrefix='searcher'\n      />\n\n      <List\n        listItems={query.length ? searchState : ids}\n        component={query.length ? UserItem : ChatItem}\n        listItemProps={\n          query.length\n            ? {\n                setSearchState: setSearchState,\n                setQuery: setQuery\n              }\n            : {\n                setActiveChatId: memorizedSetActiveChatId\n              }\n        }\n        className='chat-list'\n      />\n    </aside>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  chatsIds: state.chats.ids\n});\n\nconst mapDispatchToProps = {\n  setActiveChatId,\n  handleAuthLogout\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);\n","export default (func: (...param: any[]) => void, ms: number) => {\n  let isCan = true;\n  let delayedContext: any;\n  let delayedArguments: any;\n\n  return function wrapper(...args: any) {\n    const _self: any = wrapper;\n\n    if (!isCan) {\n      delayedContext = _self;\n      delayedArguments = args;\n      return;\n    }\n\n    func.apply(_self, args);\n    isCan = false;\n\n    setTimeout(() => {\n      isCan = true;\n\n      if (delayedArguments) {\n        wrapper.apply(delayedContext, delayedArguments);\n        delayedArguments = delayedContext = null;\n      }\n    }, ms);\n  };\n};","import { createSelector } from 'reselect';\n\nimport { AppState } from \"..\";\n\nexport const getCurrentUserId = (state: AppState) => state.auth.currentUser && state.auth.currentUser._id;\n\nexport const getUsersForChat = createSelector(\n  (state: AppState, senderId: string) => state.users.entities[senderId],\n  (state: AppState, senderId: string) => state.auth.currentUser,\n  (state: AppState, senderId: string) => senderId,\n\n  (participant, currentUser, senderId) => {\n    if (!participant && currentUser._id !== senderId) {\n      return {};\n    }\n\n    if (!participant && currentUser._id === senderId) {\n      return currentUser;\n    }\n\n    if (participant) {\n      return participant;\n    }\n  }\n);\n\n","import React, { useState, useRef, MutableRefObject } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./ChatInput.scss\";\nimport { AppState } from \"../..\";\nimport { getCurrentUserId } from \"../../redux/selectors\";\n\ninterface IProps {\n  activeChatId: string;\n  senderId: string;\n  sendMsg: (activeChatId: string, msg: string, senderId: string) => void;\n}\n\nconst ChatInput = (props: IProps) => {\n  const [msg, setMsg] = useState<string>(\"\");\n\n  const inputRef: MutableRefObject<any> = useRef();\n\n  const onEnterHandler = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"Enter\" && e.shiftKey) {\n      return;\n    }\n    if (e.key === \"Enter\" && !inputRef.current.innerText.trim().length) {\n      e.preventDefault();\n\n      return;\n    }\n\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n\n      props.sendMsg(props.activeChatId, msg, props.senderId);\n      inputRef.current.innerText = \"\";\n      setMsg(\"\");\n    }\n  };\n\n  const onInputHandler = (e: any) => {\n    setMsg(e.target.innerText);\n  };\n\n  return (\n    <div className='chat-input'>\n      <div\n        ref={inputRef}\n        contentEditable\n        onKeyDown={onEnterHandler}\n        onInput={onInputHandler}\n        className='chat-input__input'\n      />\n\n      {!msg.length && <span className='chat-input__placeholder'>Message...</span>}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  activeChatId: state.activeChat.activeChatId,\n  senderId: getCurrentUserId(state)\n});\n\nexport default connect(mapStateToProps)(ChatInput);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport setAvatar from '../../utils/setAvatar';\nimport { getUsersForChat } from '../../redux/selectors';\nimport  showTimelineDate  from '../../utils/convertDate'\n\nimport { IMessage, IUser } from '../../redux/types';\nimport { AppState } from '../..';\nimport LazyLoadImage from '../../components/LazyLoadImage/LazyLoadImage';\n\ninterface IProps {\n  message: IMessage,\n  user: IUser,\n  currentUser: IUser,\n};\n\ninterface IOwnProps {\n  message: IMessage,\n};\n\nconst Msg = (props: IProps) => {\n  \n  const setMsgType = () => {\n    if (props.message.data.senderId === props.currentUser._id) {\n      return 'out';\n    }\n    return 'inc';\n  };\n\n  return (\n    <li key={props.message._id} className=\"chat-timeline-list__item\">\n      <section \n        data-msg-type={setMsgType()} \n        className=\"chat-timeline-list__msg-wrap\">\n        <div className=\"chat-timeline-list__ava-wrp\">\n          <LazyLoadImage src={setAvatar(props.user)} alt=\"user avatar\" />\n        </div>\n\n        <div className=\"chat-timeline-list__info-block\">\n          <span className=\"chat-timeline-list__name\">{props.user.name || 'loading...'}</span>\n          <span className=\"chat-timeline-list__time\">{showTimelineDate(props.message.date)}</span>\n        </div>\n\n        <p className=\"chat-timeline-list__msg-body\">\n          {props.message.data.body}\n        </p>\n      </section>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state: AppState, ownProps: IOwnProps) => ({\n  user: getUsersForChat(state, ownProps.message.data.senderId),\n  currentUser: state.auth.currentUser,\n});\n\nexport default connect(mapStateToProps)(Msg);","import React, { useEffect, useState, useRef, MutableRefObject } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./ChatTimeline.scss\";\nimport { getChatTimeline, updateChatTimeline } from \"../../redux/activeChat/activeChatReducer\";\nimport { TIMELINE_MSG_LIMIT } from \"../../api/const\";\n\nimport Msg from \"./Msg\";\n\nimport { IMessage } from \"../../redux/types\";\nimport { AppState } from \"../..\";\nimport usePrev from \"../../customHooks/usePrev\";\n\ninterface IProps {\n  activeChatId: string;\n  timeline: IMessage[];\n  getChatTimeline: (id: string) => void;\n  updateChatTimeline: (id: string, limit: number, offset: number) => void;\n}\n\nconst ChatTimeline = (props: IProps) => {\n  const [messages, setMessages] = useState<IMessage[]>([]);\n  const [pending, setPending] = useState<boolean>(false);\n\n  const timelineRef: MutableRefObject<any> = useRef();\n\n  const prevMsgCount = usePrev(messages.length);\n  const prevActiveChatId = usePrev(props.activeChatId);\n\n  useEffect(() => {\n    props.getChatTimeline(props.activeChatId);\n  }, []);\n\n  useEffect(() => {\n    if (prevActiveChatId !== props.activeChatId) {\n      props.getChatTimeline(props.activeChatId);\n    }\n  }, [props.activeChatId]);\n\n  useEffect(() => {\n    setMessages(props.timeline);\n  }, [props.timeline]);\n\n  useEffect(() => {\n    if (prevMsgCount === 0 || messages.length - prevMsgCount === 1) {\n      timelineRef.current.scrollTop = timelineRef.current.scrollHeight;\n    }\n    setPending(false);\n  }, [messages.length]);\n\n  const handleScroll = () => {\n    if (timelineRef.current.scrollHeight && timelineRef.current.scrollTop < 400 && !pending) {\n      setPending(true);\n      props.updateChatTimeline(props.activeChatId, TIMELINE_MSG_LIMIT, messages.length);\n    }\n  };\n\n  return (\n    <section onScroll={handleScroll} ref={timelineRef} className='chat-timeline'>\n      <ul className='chat-timeline-list'>\n        {messages.length\n          ? messages.map((message) => {\n              return <Msg key={message._id} message={message} />;\n            })\n          : null}\n      </ul>\n    </section>\n  );\n};\nconst mapStateToProps = (state: AppState) => ({\n  timeline: state.activeChat.timeline\n});\n\nconst mapDispatchToProps = {\n  getChatTimeline,\n  updateChatTimeline\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatTimeline);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './ChatWindow.scss';\nimport ChatInput from '../ChatInput/ChatInput';\nimport ChatTimeline from '../ChatTimeline/ChatTimeline';\n\nimport { AppState } from '../..';\n\n\ninterface IProps {\n  sendMsg: (activeChatId: string, msg: string, senderId: string) => void,\n  activeChatId: string,\n};\n\nconst ChatWindow = (props: IProps) => {\n  if (!props.activeChatId) return null;\n\n  return (\n    <section className=\"chat-window\">\n      <ChatTimeline activeChatId={props.activeChatId} />\n\n      <ChatInput sendMsg={props.sendMsg} />\n    </section>\n  );\n};\n\nconst mapStateToProps= (state: AppState) => ({\n  activeChatId: state.activeChat.activeChatId,\n});\n\nexport default connect(mapStateToProps)(ChatWindow);\n","import React from 'react';\n\nimport ChatList from '../../containers/ChatList/ChatList';\nimport ChatWindow from '../../containers/ChatWindow/ChatWindow';\n\ninterface IPropsMainComponents {\n  sendMsg: (activeChatId: string, msg: string, senderId: string) => void,\n};\n\n\nconst MainComponents = (props: IPropsMainComponents) => (\n  <>\n    <ChatList />\n\n    <ChatWindow sendMsg={props.sendMsg} />\n  </>\n);\n\nexport default MainComponents;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport usePrev from '../../customHooks/usePrev';\nimport WebSocket from '../../components/WebSocket/WebSocket';\nimport MainComponents from './MainComponents';\nimport { initApp } from '../../redux/auth/authReducer';\nimport './MainPage.scss';\n\nimport { AppState } from '../..';\nimport LS from '../../utils/LS';\n\ninterface IProps {\n  isAuth: boolean,\n  initApp: () => void,\n};\n\n\nconst MainPage = ({ initApp, isAuth }: IProps) => {\n  const prevAuthStatus = usePrev(isAuth);\n\n  useEffect(() => {\n    initApp();\n  }, [initApp]);\n\n  useEffect(() => {\n    const user = LS.getItem('user');\n\n    if ((prevAuthStatus === false && isAuth) ||\n    !user) {\n      window.location.href = '/login';\n    }\n\n    if (!user) {\n      window.location.href = '/login';\n    }\n  }, [isAuth]);\n\n  return (\n    <main className=\"main\">\n      <WebSocket component={MainComponents} />\n    </main>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isAuth: state.auth.isAuth,\n});\n\nconst mapDispatchToProps = {\n  initApp,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage)","import React, { useState } from \"react\";\nimport { Form, Field } from \"react-final-form\";\n\nimport { setUserAva } from \"../../utils/setAvatar\";\nimport API from \"../../api/api\";\n\nconst SignUp = () => {\n  const [photo, setPhoto] = useState({\n    file: \"\",\n    url: \"\"\n  });\n\n  const handleOnChange = (e) => {\n    const file = e.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setPhoto({ file: reader.result, url: URL.createObjectURL(file) });\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onSubmit = (e) => {\n    API.signUpUser(e.name, e.pass, photo.file)\n      .then(() => {\n        window.location.href = \"/login\";\n      })\n      .catch(console.error);\n  };\n\n  return (\n    <div className='login-wrapper'>\n      <Form onSubmit={onSubmit} validate={validate}>\n        {({ handleSubmit, submitting, pristine }) => (\n          <form onSubmit={handleSubmit}>\n            <label htmlFor='file-input' className='img-wrap'>\n              <img src={photo.url || setUserAva()} alt='' />\n            </label>\n\n            <Field\n              name='file'\n              type='file'\n              onChange={handleOnChange}\n              tebindex={1}\n              component='input'\n              id='file-input'\n            />\n\n            <Field name='name'>\n              {({ input, meta }) => (\n                <>\n                  <input\n                    {...input}\n                    type='text'\n                    tabIndex={2}\n                    placeholder='username'\n                    component='input'\n                    autoFocus\n                  />\n\n                  {meta.error && meta.touched && <span className='login-error'>{meta.error}</span>}\n                </>\n              )}\n            </Field>\n\n            <Field name='pass'>\n              {({ input, meta }) => (\n                <>\n                  <input\n                    {...input}\n                    type='password'\n                    tabIndex={3}\n                    placeholder='password'\n                    component='input'\n                  />\n\n                  {meta.error && meta.touched && <span className='login-error'>{meta.error}</span>}\n                </>\n              )}\n            </Field>\n\n            <Field name='pass2'>\n              {({ input, meta }) => (\n                <>\n                  <input\n                    {...input}\n                    type='password'\n                    tabIndex={4}\n                    placeholder='confirm pass'\n                    component='input'\n                  />\n\n                  {meta.error && meta.touched && <span className='login-error'>{meta.error}</span>}\n                </>\n              )}\n            </Field>\n\n            <div className='controls'>\n              <button\n                type='submit'\n                disabled={submitting || pristine}\n                className='btn btn-primary btn-primary--wide'\n              >\n                Sign In\n              </button>\n            </div>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nconst validate = ({ name, pass, pass2 }) => {\n  const err = {};\n\n  if (!name || !name.trim().length) {\n    err.name = \"Chouse your nickname\";\n  }\n\n  if (!pass || !pass.trim().length) {\n    err.pass = \"Enter a password\";\n  }\n\n  if (!pass2 || !pass2.trim().length) {\n    err.pass2 = \"Confirm your password\";\n  }\n\n  if (pass && pass2 && pass2 !== pass) {\n    err.pass2 = \"password is not equal\";\n  }\n\n  return err;\n};\n\nexport default SignUp;\n","import React, { ReactType } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\ninterface IPrivateRoute {\n  component: ReactType;\n  isAuth: boolean;\n  exact: boolean;\n  path: string;\n}\n\nconst PrivateRoute = ({ isAuth, component: Component, ...rest }: IPrivateRoute) => {\n  console.log(isAuth);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => (isAuth ? <Component {...rest} {...props} /> : <Redirect to='/login' />)}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"./clientConfig/api-config\";\n\nimport Login from \"./Pages/Login/Login\";\nimport MainPage from \"./Pages/MainPage/MainPage\";\nimport SignUp from \"./Pages/SignUp/SignUp\";\n\nimport { AppState } from \".\";\nimport PrivateRoute from \"./components/hiddenComponents/PrivateRoute\";\n\ninterface IApp {\n  activeWindow: string;\n  isAuth: boolean;\n}\n\nconst App = (props: IApp) => {\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          <Route path='/login' component={Login} />\n\n          <Route path='/sign-up' component={SignUp} />\n\n          <PrivateRoute isAuth={props.isAuth} exact path='/' component={MainPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  activeWindow: state.activeWindow.path,\n  isAuth: state.auth.isAuth\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from \"redux\";\nimport activeWindow from './activeWindow/activeWindowReducer';\nimport auth from './auth/authReducer';\nimport users from './users/userReducer';\nimport chats from './chats/chatsReducer';\nimport activeChat from './activeChat/activeChatReducer';\n\nexport default combineReducers({\n  activeWindow,\n  auth,\n  users,\n  chats,\n  activeChat,\n});","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, logger)));\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}